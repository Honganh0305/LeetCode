#Python
class Solution(object):
    def plusOne(self, digits):
        i = len(digits) - 1
        while i >= 0:
            digits[i] += 1
            if digits[i] < 10:
                return digits
            digits[i] = 0
            i -= 1
        return [1] + digits


#C++
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int carry = 1;
        for (int i = digits.size() - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry) {
            digits.insert(digits.begin(), carry);
        }
        return digits;
    }
};

#Typescript
function plusOne(digits: number[]): number[] {
    digits.reverse()
    let carry = 1;

    for (let i =0; i< digits.length; i++) {
        const sum = digits[i] + carry;
        digits[i] = sum %10;
        carry = Math.floor(sum/10);
    }

    if(carry) digits.push(carry);
    return digits.reverse();
};
