# Typescript
function searchInsert(nums: number[], target: number): number {
  for (let i = 0; i < nums.length; i++) {
    if (nums[i] >= target) {
      return i;
    }
  }
  return nums.length;
}

#Python
class Solution:
    def searchInsert(self, nums, target):
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return left


// C++
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int i =0;
        bool found = false;
        int index = 0;
       while (i < (int)nums.size() && !found) {
       if (nums[i] == target) { found = true; index = i; }
    else if (nums[i] > target) { index = i; break; }
    ++i;
   }
if (!found && i == (int)nums.size()) index = i;
return index;
    }
};

